{"version":3,"sources":["store/reducers/auth/types.ts","utils/rules.ts","hooks/useTypedSelector.ts","store/reducers/event/types.ts","store/reducers/auth/action-creators.ts","router/index.ts","api/UserService.ts","store/reducers/event/action-creators.ts","store/reducers/action-creators.ts","hooks/useActions.ts","components/LoginForm.tsx","pages/Login.tsx","utils/date.ts","components/EventCalendar.tsx","components/EventForm.tsx","pages/Event.tsx","components/AppRouter.tsx","components/Navbar.tsx","App.tsx","reportWebVitals.ts","store/reducers/auth/index.ts","store/reducers/event/index.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["AuthActionEnum","rules","message","required","validator","_","value","isSameOrAfter","moment","Promise","resolve","reject","Error","useTypedSelector","useSelector","EventActionEnum","AuthActionCreators","setUser","user","type","SET_USER","payload","setIsAuth","auth","SET_AUTH","setIsLoading","SET_IS_LOADING","setError","SET_ERROR","login","username","password","dispatch","a","setTimeout","axios","get","response","mockUsers","data","find","localStorage","setItem","e","logout","removeItem","RouteNames","UserService","EventActionCreators","setGuests","SET_GUESTS","setEvents","SET_EVENTS","fetchGuests","getUsers","console","log","createEvent","event","events","getItem","json","JSON","parse","push","stringify","fetchEvents","currentUserEvents","filter","ev","author","guest","allActionCreators","useActions","useDispatch","bindActionCreators","LoginForm","state","error","isLoading","useState","setUsername","setPassword","onFinish","style","color","Item","label","name","onChange","target","htmlType","loading","Login","justify","align","className","formatDate","date","year","getFullYear","month","getMonth","day","getDate","EventCalendar","props","dateCellRender","formatedData","toDate","currentDayEvents","map","index","description","Option","Select","EventForm","setEvent","submit","selectDate","guests","Event","modalVisible","setModalVisible","useEffect","onClick","title","visible","footer","onCancel","publicRoutes","path","LOGIN","exact","component","privateRoutes","EVENT","AppRouter","isAuth","route","to","Navbar","router","useHistory","Header","theme","mode","selectable","App","Content","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","EventReducer","action","rootReducer","combineReducers","reducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad31a257.chunk.js","sourcesContent":["import {IUser} from \"../../../models/IUser\";\r\n\r\nexport interface AuthState {\r\n    isAuth: boolean;\r\n    user: IUser;\r\n    isLoading: boolean;\r\n    error: string;\r\n}\r\n\r\nexport enum AuthActionEnum {\r\n    SET_AUTH = \"SET_AUTH\",\r\n    SET_ERROR = \"SET_ERROR\",\r\n    SET_USER = \"SET_USER\",\r\n    SET_IS_LOADING = \"SET_IS_LOADING\",\r\n}\r\n\r\nexport interface SetAuthAction {\r\n    type: AuthActionEnum.SET_AUTH;\r\n    payload: boolean;\r\n}\r\nexport interface SetErrorAction {\r\n    type: AuthActionEnum.SET_ERROR;\r\n    payload: string;\r\n}\r\nexport interface SetUserAction {\r\n    type: AuthActionEnum.SET_USER;\r\n    payload: IUser;\r\n}\r\nexport interface SetIsLoadingAction {\r\n    type: AuthActionEnum.SET_IS_LOADING;\r\n    payload: boolean;\r\n}\r\n\r\nexport type AuthAction =\r\n    SetAuthAction |\r\n    SetUserAction |\r\n    SetErrorAction |\r\n    SetIsLoadingAction","import moment, {Moment} from \"moment\";\r\n\r\n\r\nexport const rules = {\r\n    required: (message: string = 'Обязательное поле') => ({\r\n        required: true,\r\n        message\r\n    }),\r\n    isDateAfter: (message: string) => () =>({\r\n        validator(_:any, value: Moment){\r\n            if (value.isSameOrAfter(moment())){\r\n                return Promise.resolve()\r\n            }\r\n            return Promise.reject(new Error(message))\r\n        }\r\n    })\r\n}","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store\";\r\n\r\nexport const useTypedSelector:  TypedUseSelectorHook<RootState> = useSelector","import {IUser} from \"../../../models/IUser\";\r\nimport {IEvent} from \"../../../models/IEvent\";\r\n\r\nexport interface EventState {\r\n    guests: IUser[];\r\n    events: IEvent[]\r\n}\r\n\r\nexport enum EventActionEnum {\r\n    SET_GUESTS= \"SET_GUESTS\",\r\n    SET_EVENTS = \"SET_EVENTS\"\r\n}\r\n\r\nexport interface SetGuestsAction {\r\n    type: EventActionEnum.SET_GUESTS;\r\n    payload: IUser[]\r\n}\r\n\r\nexport interface SetEventsAction {\r\n    type: EventActionEnum.SET_EVENTS;\r\n    payload: IEvent[]\r\n}\r\n\r\nexport type EventAction =\r\n    SetGuestsAction |\r\n    SetEventsAction","import {AuthActionEnum, SetAuthAction, SetErrorAction, SetIsLoadingAction, SetUserAction} from \"./types\";\r\nimport {IUser} from \"../../../models/IUser\";\r\nimport {AppDispatch} from \"../../index\";\r\nimport axios from \"axios\";\r\n\r\n\r\nexport const AuthActionCreators = {\r\n    setUser: (user: IUser): SetUserAction => ({type: AuthActionEnum.SET_USER, payload: user}),\r\n    setIsAuth: (auth: boolean): SetAuthAction => ({type: AuthActionEnum.SET_AUTH, payload: auth}),\r\n    setIsLoading: (payload: boolean): SetIsLoadingAction => ({type: AuthActionEnum.SET_IS_LOADING, payload}),\r\n    setError: (payload: string): SetErrorAction => ({type: AuthActionEnum.SET_ERROR, payload}),\r\n    login: (username: string, password: string) => async (dispatch: AppDispatch) => {\r\n       try{\r\n           dispatch(AuthActionCreators.setIsLoading(true));\r\n           setTimeout(async ()=> {\r\n               const response = await axios.get<IUser[]>('./users.json')\r\n               const mockUsers = response.data.find(user => user.username === username && user.password === password)\r\n               if (mockUsers) {\r\n                   localStorage.setItem('auth', 'true');\r\n                   localStorage.setItem('username', mockUsers.username);\r\n                   dispatch(AuthActionCreators.setUser(mockUsers))\r\n                   dispatch(AuthActionCreators.setIsAuth(true))\r\n               }else {\r\n                   dispatch(AuthActionCreators.setError('Некорректный логин или пароль'))\r\n               }\r\n               dispatch(AuthActionCreators.setIsLoading(false));\r\n           }, 1000)\r\n       } catch (e) {\r\n           dispatch(AuthActionCreators.setError('Произошла ошибка при логине'))\r\n       }\r\n    },\r\n    logout: () => async (dispatch: AppDispatch) => {\r\n            localStorage.removeItem('auth');\r\n            localStorage.removeItem('username');\r\n            dispatch(AuthActionCreators.setUser({} as IUser))\r\n            dispatch(AuthActionCreators.setIsAuth(false))\r\n    }\r\n}","import React from \"react\";\r\nimport Login from \"../pages/Login\";\r\nimport Event from \"../pages/Event\";\r\n\r\nexport interface IRoute {\r\n    path: string;\r\n    component: React.ComponentType;\r\n    exact?: boolean\r\n}\r\nexport enum RouteNames {\r\n    LOGIN = '/login',\r\n    EVENT = '/'\r\n}\r\n\r\nexport const publicRoutes: IRoute[] = [\r\n    {path: RouteNames.LOGIN, exact: true, component: Login}\r\n]\r\n\r\nexport const privateRoutes: IRoute[] = [\r\n    {path: RouteNames.EVENT, exact: true, component: Event}\r\n]","import axios, {AxiosResponse} from \"axios\";\r\nimport {IUser} from \"../models/IUser\";\r\n\r\nexport default class UserService {\r\n    static async getUsers(): Promise<AxiosResponse<IUser[]>> {\r\n        return axios.get<IUser[]>('./users.json')\r\n    }\r\n}","import {EventActionEnum, SetEventsAction, SetGuestsAction} from \"./types\";\r\nimport {IUser} from \"../../../models/IUser\";\r\nimport {IEvent} from \"../../../models/IEvent\";\r\nimport {AppDispatch} from \"../../index\";\r\nimport UserService from \"../../../api/UserService\";\r\n\r\nexport const EventActionCreators = {\r\n    setGuests: (payload: IUser[]): SetGuestsAction => ({type: EventActionEnum.SET_GUESTS, payload}),\r\n    setEvents: (payload: IEvent[]): SetEventsAction => ({type: EventActionEnum.SET_EVENTS, payload}),\r\n    fetchGuests: () =>  async (dispatch: AppDispatch) => {\r\n        try {\r\n            const response = await UserService.getUsers()\r\n            dispatch(EventActionCreators.setGuests(response.data));\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    },\r\n    createEvent: (event: IEvent) =>  async (dispatch: AppDispatch) => {\r\n        try {\r\n            const events = localStorage.getItem(\"events\") || '[]'\r\n            const json = JSON.parse(events) as IEvent[];\r\n            json.push(event);\r\n            dispatch(EventActionCreators.setEvents(json));\r\n            localStorage.setItem('events', JSON.stringify(json));\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    },\r\n    fetchEvents: (username: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            const events = localStorage.getItem(\"events\") || '[]'\r\n            const json = JSON.parse(events) as IEvent[];\r\n            const currentUserEvents = json.filter(ev => ev.author === username || ev.guest === username);\r\n            dispatch(EventActionCreators.setEvents(currentUserEvents));\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n}","import {AuthActionCreators} from \"./auth/action-creators\";\r\nimport {EventActionCreators} from \"./event/action-creators\";\r\n\r\nexport const allActionCreators = {\r\n    ...AuthActionCreators,\r\n    ...EventActionCreators\r\n}","import {useDispatch} from \"react-redux\";\r\nimport {AppDispatch} from \"../store\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {allActionCreators} from \"../store/reducers/action-creators\";\r\n\r\nexport const useActions = () => {\r\n    const dispatch = useDispatch()\r\n    return bindActionCreators(allActionCreators, dispatch)\r\n}","import React, {FC, useState} from 'react';\r\nimport {Button, Form, Input} from \"antd\";\r\nimport {rules} from \"../utils/rules\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {AuthActionCreators} from \"../store/reducers/auth/action-creators\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\nimport {useActions} from \"../hooks/useActions\";\r\n\r\nconst LoginForm: FC = () => {\r\n    const dispatch = useDispatch()\r\n    const {error, isLoading} = useTypedSelector(state => state.auth)\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const {login} = useActions()\r\n\r\n    const submit = () => {\r\n        login(username, password)\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            onFinish = {submit}\r\n        >\r\n            {error && <div style={{color: 'red'}}>\r\n                {error}\r\n            </div>}\r\n            <Form.Item\r\n                label = \"Имя пользователя\"\r\n                name = \"username\"\r\n                rules = {[rules.required('Please input your username')]}\r\n            >\r\n                <Input\r\n                    value={username}\r\n                    onChange={e => setUsername(e.target.value)}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item\r\n                label = \"Password\"\r\n                name = \"password\"\r\n                rules = {[rules.required('Please input your password')]}\r\n            >\r\n                <Input\r\n                    value={password}\r\n                    onChange={e => setPassword(e.target.value)}\r\n                    type = {'password'}\r\n                />\r\n            </Form.Item>\r\n                <Form.Item>\r\n                    <Button type = \"primary\" htmlType=\"submit\" loading={isLoading}>\r\n                        Войти\r\n                    </Button>\r\n                </Form.Item>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default LoginForm;","import React, {FC} from 'react';\r\nimport {Card, Layout, Row} from \"antd\";\r\nimport LoginForm from \"../components/LoginForm\";\r\n\r\nconst Login: FC = () => {\r\n    return (\r\n        <Layout>\r\n            <Row justify=\"center\" align=\"middle\" className=\"h100\">\r\n                <Card>\r\n                    <LoginForm />\r\n                </Card>\r\n            </Row>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Login;","\r\nexport const formatDate = (date: Date): string => {\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1\r\n    const day = date.getDate() < 10 ? `0${date.getDate() }` : date.getDate()\r\n    return `${year}.${month}.${day}`\r\n}","import React, {FC} from 'react';\r\nimport {Calendar} from \"antd\";\r\nimport {IEvent} from \"../models/IEvent\";\r\nimport {Moment} from \"moment\";\r\nimport {formatDate} from \"../utils/date\";\r\n\r\ninterface EventCalendarProps {\r\n    events: IEvent[]\r\n}\r\n\r\nconst EventCalendar: FC<EventCalendarProps> = (props) => {\r\n\r\n    function dateCellRender(value: Moment) {\r\n        const formatedData = formatDate(value.toDate());\r\n        const currentDayEvents = props.events.filter(ev => ev.date === formatedData)\r\n        return (\r\n            <div>\r\n                {currentDayEvents.map((ev,index) =>\r\n                    <div key={index}>{ev.description}</div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Calendar\r\n                dateCellRender={dateCellRender}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EventCalendar;","import React, {FC, useState} from 'react';\r\nimport {Button, DatePicker, Form, Input, Row, Select} from \"antd\";\r\nimport {rules} from \"../utils/rules\";\r\nimport {IUser} from \"../models/IUser\";\r\nimport {IEvent} from \"../models/IEvent\";\r\nimport {Moment} from \"moment\";\r\nimport {formatDate} from \"../utils/date\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\nconst { Option } = Select;\r\n\r\ninterface EventFormProps {\r\n    guests: IUser[],\r\n    submit: (event: IEvent) => void\r\n}\r\n\r\nconst EventForm :FC<EventFormProps>= (props) => {\r\n    const [event,setEvent] = useState<IEvent>({\r\n        author: '',\r\n        date: '',\r\n        description: '',\r\n        guest: ''\r\n    } as IEvent)\r\n    const {user} = useTypedSelector(state => state.auth)\r\n\r\n    const selectDate = (data: Moment | null) => {\r\n        if (data) {\r\n            setEvent({...event, date: formatDate(data.toDate())})\r\n        }\r\n    }\r\n\r\n    const submitForm = () => {\r\n        props.submit({...event, author: user.username})\r\n    }\r\n\r\n    return (\r\n        <Form onFinish={submitForm}>\r\n            <Form.Item\r\n                label = \"Описание события\"\r\n                name = \"description\"\r\n                rules = {[rules.required()]}\r\n            >\r\n                <Input\r\n                    onChange={(e) => setEvent({...event, description: e.target.value})}\r\n                    value={event.description}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item\r\n                label = \"Дата события\"\r\n                name = \"data\"\r\n                rules = {[rules.required(), rules.isDateAfter('Нельзя создать событие в прошлом')]}\r\n            >\r\n                <DatePicker\r\n                    onChange={(data) => selectDate(data)}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item\r\n                label = \"Выберите гостя\"\r\n                name = \"guest\"\r\n                rules = {[rules.required()]}\r\n            >\r\n                <Select onChange={(guest:string) => setEvent({...event, guest})}>\r\n                    {props.guests.map(guest =>\r\n                        <Option key={guest.username} value={guest.username}>{guest.username}</Option>\r\n                    )}\r\n                </Select>\r\n            </Form.Item>\r\n            <Row justify='end'>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Создать\r\n                    </Button>\r\n                </Form.Item>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default EventForm;","import React, {FC, useEffect, useState} from 'react';\r\nimport {Button, Layout, Modal, Row} from \"antd\";\r\nimport EventCalendar from \"../components/EventCalendar\";\r\nimport EventForm from \"../components/EventForm\";\r\nimport {useActions} from \"../hooks/useActions\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\nimport {IEvent} from \"../models/IEvent\";\r\n\r\nconst Event: FC = () => {\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const {fetchGuests, createEvent, fetchEvents} = useActions();\r\n    const {guests, events} = useTypedSelector(state => state.event)\r\n    const {user} = useTypedSelector(state => state.auth)\r\n\r\n    useEffect(()=>{\r\n        fetchGuests()\r\n        fetchEvents(user.username)\r\n    }, [])\r\n\r\n    const addNewEvent = (event: IEvent) => {\r\n        setModalVisible(false);\r\n        createEvent(event)\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <EventCalendar events={events}/>\r\n            <Row justify='center'>\r\n                <Button\r\n                    onClick={()=> setModalVisible(true)}\r\n                >\r\n                    Добавить события\r\n                </Button>\r\n            </Row>\r\n            <Modal\r\n                title=\"Добавить событие\"\r\n                visible={modalVisible}\r\n                footer={null}\r\n                onCancel={()=>setModalVisible(false)}\r\n            >\r\n                <EventForm\r\n                    guests={guests}\r\n                    submit={addNewEvent}\r\n                />\r\n            </Modal>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Event;","import React from 'react';\r\nimport {Switch, Route, Redirect} from \"react-router-dom\";\r\nimport {privateRoutes, publicRoutes, RouteNames} from \"../router\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\n\r\n\r\n\r\n\r\nconst AppRouter = () => {\r\n    const {isAuth} = useTypedSelector(state => state.auth)\r\n    return (\r\n        isAuth ?\r\n        <Switch>\r\n            {privateRoutes.map(route =>\r\n                <Route path={route.path} exact={route.exact}\r\n                       component={route.component}\r\n                       key = {route.path}\r\n                />\r\n            )}\r\n            <Redirect to={RouteNames.EVENT} />\r\n        </Switch>\r\n            :\r\n            <Switch>\r\n                {publicRoutes.map(route =>\r\n                    <Route path={route.path} exact={route.exact}\r\n                           component={route.component}\r\n                           key = {route.path}\r\n                    />\r\n                )}\r\n                <Redirect to={RouteNames.LOGIN} />\r\n            </Switch>\r\n    );\r\n};\r\n\r\nexport default AppRouter;","import React, {FC} from 'react';\r\nimport {Layout, Menu, Row} from \"antd\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport {RouteNames} from \"../router\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {AuthActionCreators} from \"../store/reducers/auth/action-creators\";\r\nimport {useActions} from \"../hooks/useActions\";\r\n\r\nconst Navbar: FC = () => {\r\n    const router = useHistory()\r\n    const {isAuth, user} = useTypedSelector(state => state.auth)\r\n    const dispatch = useDispatch()\r\n    const {logout} = useActions()\r\n\r\n    return (\r\n        <Layout.Header>\r\n            <Row justify='end'>\r\n                {isAuth\r\n                    ?\r\n                    <>\r\n                        <div style={{color: \"white\"}}>\r\n                            {user.username}\r\n                        </div>\r\n                        <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\r\n                            <Menu.Item onClick={logout} key={1}>Выйти</Menu.Item>\r\n                        </Menu>\r\n                    </>\r\n                    :\r\n                    <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\r\n                        <Menu.Item onClick={() => router.push(RouteNames.LOGIN)} key={1}>Login</Menu.Item>\r\n                    </Menu>\r\n                }\r\n\r\n            </Row>\r\n        </Layout.Header>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React, {useEffect} from 'react';\nimport './App.css';\nimport AppRouter from \"./components/AppRouter\";\nimport Navbar from \"./components/Navbar\";\nimport {Layout} from \"antd\";\nimport {useActions} from \"./hooks/useActions\";\nimport {IUser} from \"./models/IUser\";\n\nfunction App() {\n    const {setUser, setIsAuth} = useActions()\n\n    useEffect(()=> {\n        if(localStorage.getItem('auth')){\n            setUser({username: localStorage.getItem('username' || '')} as IUser)\n            setIsAuth(true)\n        }\n    }, [])\n  return (\n    <div>\n        <Navbar />\n        <Layout.Content>\n            <AppRouter />\n        </Layout.Content>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {AuthAction, AuthActionEnum, AuthState} from \"./types\";\r\nimport {IUser} from \"../../../models/IUser\";\r\n\r\nconst initialState:AuthState = {\r\n    isAuth: false,\r\n    error: '',\r\n    isLoading: false,\r\n    user: {} as IUser\r\n}\r\n\r\nexport default function authReducer(state = initialState, action: AuthAction):AuthState {\r\n    switch (action.type) {\r\n        case AuthActionEnum.SET_AUTH:\r\n            return {...state, isAuth: action.payload, isLoading: false}\r\n        case AuthActionEnum.SET_USER:\r\n            return {...state, user: action.payload}\r\n        case AuthActionEnum.SET_ERROR:\r\n            return {...state, error: action.payload, isLoading: false}\r\n        case AuthActionEnum.SET_IS_LOADING:\r\n            return {...state, isLoading: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}","import {EventAction, EventActionEnum, EventState} from \"./types\";\r\n\r\nconst initialState: EventState = {\r\n    events: [],\r\n    guests: []\r\n}\r\n\r\nconst EventReducer = (state = initialState, action: EventAction):EventState => {\r\n    switch (action.type){\r\n        case EventActionEnum.SET_GUESTS:\r\n            return {...state, guests: action.payload}\r\n        case EventActionEnum.SET_EVENTS:\r\n            return {...state, events: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default EventReducer","import auth from \"./auth\";\r\nimport event from './event';\r\n\r\nexport default {\r\n    auth,\r\n    event\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducers from \"./reducers\";\r\n\r\nconst rootReducer = combineReducers(reducers)\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n// https://redux.js.org/usage/usage-with-typescript\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n   <Provider store={store}>\n       <HashRouter>\n            <App />\n       </HashRouter>\n   </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}